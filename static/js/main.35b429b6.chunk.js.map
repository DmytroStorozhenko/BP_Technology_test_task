{"version":3,"sources":["components/all_images/allImages.module.css","components/footer/footer.module.css","components/ImgModalWindow/imgModalWindow.module.css","components/header/header.module.css","components/header/Header.tsx","api/api.ts","state/allImgReducer.ts","state/imgModalWindowReducer.ts","common/helpers/validations_rules.ts","assets/img/close_btn.svg","components/ImgModalWindow/ImgModalWindow.tsx","common/customHooks/useForm.ts","components/all_images/AllImages.tsx","components/footer/Footer.tsx","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx","app.module.css"],"names":["module","exports","Header","className","styles","heading","instance","axios","create","baseURL","imagesApi","get","imgId","body","post","initialState","images","src","comments","setImgModal","dispatch","a","imgResponse","commentsResponse","srs","data","type","Validate","values","errors","name","length","description","ImgModalWindow","props","useDispatch","imgInfo","useSelector","state","imgModalWindow","useEffect","image_id","callback","validate","useState","setValues","setErrors","isSubmitting","setIsSubmitting","Object","keys","handleChange","event","persist","target","value","handleSubmit","preventDefault","useForm","response","comment","modal_container","modal","btn_close","onClick","closeHandler","closeBtn","alt","img","comments_block","map","comment_item","form_container","onSubmit","noValidate","form","form_input","placeholder","onChange","autoComplete","invalid_value","form_btn","AllImages","allImg","currentImage","setCurrentImage","all_img_container","setIsModalOpen","img_item","isModalOpen","Footer","line","copyright","App","app","content","modal_block","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","push","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35b429b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"all_img_container\":\"allImages_all_img_container__2KjoX\",\"img_item\":\"allImages_img_item__3tuuz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"line\":\"footer_line__3UVUF\",\"copyright\":\"footer_copyright__LjXTy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal_container\":\"imgModalWindow_modal_container__32T4h\",\"modal\":\"imgModalWindow_modal__2mx8H\",\"img\":\"imgModalWindow_img__OH-UK\",\"comments_block\":\"imgModalWindow_comments_block__1P1Ll\",\"comment_item\":\"imgModalWindow_comment_item__29anD\",\"name\":\"imgModalWindow_name__AUeFq\",\"description\":\"imgModalWindow_description__2wfeT\",\"btn_close\":\"imgModalWindow_btn_close__2hU8n\",\"form_container\":\"imgModalWindow_form_container__3ER8z\",\"form\":\"imgModalWindow_form__10pSf\",\"invalid_value\":\"imgModalWindow_invalid_value__31qF4\",\"form_input\":\"imgModalWindow_form_input__3UUL3\",\"form_btn\":\"imgModalWindow_form_btn__2MgGb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heading\":\"header_heading__18ntT\"};","import styles from './header.module.css'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className={styles.heading}>\r\n            <h2>Test app</h2>\r\n        </div>\r\n    )\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: ' https://tzfrontend.herokuapp.com/'\r\n})\r\n\r\nexport const imagesApi = {\r\n    getAllImages: () => {\r\n        return instance.get<Array<GetAllImagesResponseType>>('images/')\r\n    },\r\n    getImage: (imgId: number) => {\r\n        return instance.get<GetImageResponseType>(`images/${imgId}/`)\r\n    },\r\n    getComments: (imgId: number) => {\r\n        return instance.get<Array<CommentResponseType>>(`comments/${imgId}/`)\r\n    },\r\n     addComment: (body: AddCommentRequestType) => {\r\n        return instance.post<CommentResponseType>('comments/add/', body)\r\n    }\r\n}\r\n\r\n// types\r\nexport type GetAllImagesResponseType = {\r\n    image_id: number\r\n    src: string\r\n}\r\n\r\nexport type GetImageResponseType = {\r\n    src: string\r\n}\r\n\r\nexport type AddCommentRequestType = {\r\n    name: string | undefined\r\n    description : string | undefined\r\n    image_id: number\r\n}\r\n\r\nexport type CommentResponseType = AddCommentRequestType & {\r\n    id: number\r\n}","import {GetAllImagesResponseType, imagesApi} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState: AllImgStateType = {\r\n    images: []\r\n}\r\n\r\nexport const allImgReducer = (state = initialState, action: AllImgActionType) => {\r\n    switch (action.type) {\r\n        case \"SET-ALL-IMG\": return {...state, images: action.images}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAllImgAction = (images: Array<GetAllImagesResponseType>) => ({\r\n    type: 'SET-ALL-IMG', images}) as const\r\n\r\n// thunks\r\nexport const setAllImg = () =>\r\n    async (dispatch: Dispatch<AllImgActionType>) => {\r\n    try {\r\n       let response = await imagesApi.getAllImages()\r\n            dispatch(setAllImgAction(response.data))\r\n    } finally {}\r\n    }\r\n\r\n// types\r\nexport type AllImgStateType = {\r\n    images: Array<GetAllImagesResponseType>\r\n}\r\ntype AllImgActionType = ReturnType<typeof setAllImgAction>","import {AddCommentRequestType, CommentResponseType, GetImageResponseType, imagesApi} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState: ImgModalStateType = {\r\n    src: '',\r\n    comments: []\r\n}\r\n\r\nexport const imgModalWindowReducer = (state: ImgModalStateType = initialState, action: ModalImgActionType) => {\r\n    switch (action.type) {\r\n        case \"SET-MODAL-IMG\":\r\n            return {...state, src: action.srs, comments: action.comments}\r\n        case \"ADD-COMMENT\":\r\n            return {...state, comments: state.comments.push(action.comment)}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setImgModalAction = (srs: string, comments: Array<CommentResponseType>) => ({\r\n    type: 'SET-MODAL-IMG', srs, comments\r\n}) as const\r\nexport const addCommentAction = (comment: CommentResponseType) => ({\r\n    type: 'ADD-COMMENT', comment\r\n}) as const\r\n\r\n// thunks\r\nexport const setImgModal = (imgId: number) =>\r\n    async (dispatch: Dispatch<ModalImgActionType>) => {\r\n        try {\r\n            let imgResponse = await imagesApi.getImage(imgId)\r\n            let commentsResponse = await imagesApi.getComments(imgId)\r\n            dispatch(setImgModalAction(imgResponse.data.src, commentsResponse.data))\r\n        } finally {\r\n        }\r\n    };\r\n\r\nexport const addComment = (body: AddCommentRequestType) =>\r\n    async (dispatch: Dispatch<ModalImgActionType>) => {\r\n        try {\r\n            let response = await imagesApi.addComment(body)\r\n            dispatch(addCommentAction(response.data))\r\n        } finally {\r\n        }\r\n    }\r\n\r\n// types\r\nexport type ImgModalStateType = GetImageResponseType & {\r\n    comments: Array<CommentResponseType>\r\n}\r\ntype ModalImgActionType =\r\n    ReturnType<typeof setImgModalAction> |\r\n    ReturnType<typeof addCommentAction>","export function Validate(values: Validate) {\r\n    let errors: Validate = {};\r\n    if (!values.name) errors.name = 'Name is required'\r\n    else if (values.name.length > 100) errors.name = 'Name length must not exceed 100 characters'\r\n    if (!values.description) errors.description = 'Description is required'\r\n    return errors;\r\n}\r\n\r\n// types\r\nexport type Validate = {\r\n    name?: string | undefined\r\n    description?: string | undefined\r\n}","export default __webpack_public_path__ + \"static/media/close_btn.63feaaed.svg\";","import {FC, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {addComment, ImgModalStateType, setImgModal} from \"../../state/imgModalWindowReducer\";\r\nimport styles from \"./imgModalWindow.module.css\"\r\nimport {useForm} from \"../../common/customHooks/useForm\";\r\nimport {Validate} from \"../../common/helpers/validations_rules\";\r\nimport closeBtn from \"../../assets/img/close_btn.svg\"\r\n\r\nexport const ImgModalWindow: FC<ImgModalPropsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n    let imgInfo = useSelector<AppRootStateType, ImgModalStateType>(state => state.imgModalWindow)\r\n    let {comments, src} = imgInfo\r\n\r\n    useEffect(() => {\r\n        dispatch(setImgModal(props.image_id))\r\n    }, [])\r\n\r\n    const submitCallback = () => {\r\n        dispatch(addComment({\r\n            name: values.name,\r\n            description: values.description,\r\n            image_id: props.image_id\r\n        }))\r\n        dispatch(setImgModal(props.image_id))\r\n    }\r\n\r\n    const {\r\n        values,\r\n        errors,\r\n        handleChange,\r\n        handleSubmit,\r\n    } = useForm(submitCallback, Validate)\r\n    return (\r\n        <>\r\n            <div className={styles.modal_container}>\r\n                <div className={styles.modal}>\r\n                    <button\r\n                        className={styles.btn_close}\r\n                        onClick={props.closeHandler}>\r\n                        <img src={closeBtn} alt=\"close_btn\"/>\r\n                    </button>\r\n                    <div className={styles.img}>\r\n                        <img src={src} alt=\"big_img\"/>\r\n                    </div>\r\n                    <div className={styles.comments_block}>\r\n                        {comments.length > 0 ? comments.map(comment => {\r\n                                return (\r\n                                    <div\r\n                                        key={comment.image_id}\r\n                                        className={styles.comment_item}>\r\n                                        <div className={styles.name}>{comment.name}</div>\r\n                                        <div className={styles.comment}>{comment.description}</div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                            : <div>This image is without comments</div>\r\n                        }\r\n                    </div>\r\n                    <div className={styles.form_container}>\r\n                        <form onSubmit={handleSubmit} noValidate className={styles.form}>\r\n                            <input\r\n                                className={styles.form_input}\r\n                                type='text'\r\n                                name='name'\r\n                                value={values.name || ''}\r\n                                placeholder='Ваше имя'\r\n                                onChange={handleChange}\r\n                                autoComplete='off'\r\n                            />\r\n                            {errors.name && <div className={styles.invalid_value}>{errors.name}</div>}\r\n                            <input\r\n                                className={styles.form_input}\r\n                                type='text'\r\n                                name='description'\r\n                                value={values.description || ''}\r\n                                placeholder='Ваш комментарий'\r\n                                onChange={handleChange}\r\n                                autoComplete='off'\r\n                            />\r\n                            {errors.description && <div className={styles.invalid_value}>{errors.description}</div>}\r\n                            <button\r\n                                className={styles.form_btn}\r\n                                type='submit'\r\n                            >Оставить комментарий\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// types\r\n\r\ntype ImgModalPropsType =\r\n    {\r\n        image_id: number\r\n        closeHandler: () => void\r\n    }","import {useState, useEffect, ChangeEvent, FormEvent} from 'react';\r\nimport {Validate} from \"../helpers/validations_rules\";\r\n\r\nexport const useForm = (\r\n    callback: () => void,\r\n    validate: (values: Validate) => Validate) => {\r\n\r\n    const [values, setValues] = useState<Validate>({});\r\n    const [errors, setErrors] = useState<Validate>({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(errors).length === 0 && isSubmitting) {\r\n            callback();\r\n        }\r\n    }, [errors]);\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        if (event) event.preventDefault();\r\n        setErrors(validate(values));\r\n        setIsSubmitting(true);\r\n        setValues({})\r\n        setErrors({})\r\n    };\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        event.persist();\r\n        setValues(values => ({...values, [event.target.name]: event.target.value}));\r\n    };\r\n\r\n    return {\r\n        handleChange,\r\n        handleSubmit,\r\n        values,\r\n        errors,\r\n    }\r\n};","import styles from './allImages.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AllImgStateType, setAllImg} from \"../../state/allImgReducer\";\r\nimport {AppRootStateType} from \"../../state/store\";\r\nimport {FC, useEffect, useState} from \"react\";\r\nimport {ImgModalWindow} from \"../ImgModalWindow/ImgModalWindow\";\r\n\r\nexport const AllImages: FC<AllImagesPropsType> = (props) => {\r\n    const allImg = useSelector<AppRootStateType, AllImgStateType>(state => state.allImg)\r\n    const dispatch = useDispatch()\r\n    const [currentImage, setCurrentImage] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAllImg())\r\n    }, [])\r\n\r\n    const openImgModalHandler = (image_id: number) => {\r\n        props.setIsModalOpen()\r\n        setCurrentImage(image_id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.all_img_container}>\r\n                {\r\n                    allImg.images.map(img => {\r\n                        return (\r\n                            <div\r\n                                onClick={() => openImgModalHandler(img.image_id)}\r\n                                className={styles.img_item}\r\n                                key={img.image_id}>\r\n                                <img src={img.src} alt=\"small_img\"/>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {props.isModalOpen &&\r\n                <div >\r\n                    <ImgModalWindow\r\n                        image_id={currentImage}\r\n                        closeHandler={props.setIsModalOpen}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n// types\r\n\r\ntype AllImagesPropsType = {\r\n    isModalOpen: boolean\r\n    setIsModalOpen: () => void\r\n}","import styles from \"./footer.module.css\"\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <>\r\n            <footer>\r\n                <div className={styles.line}></div>\r\n                <div className={styles.copyright}>© 2018-2019</div>\r\n            </footer>\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react';\nimport './app.module.css';\nimport styles from './app.module.css'\nimport {Header} from \"./components/header/Header\";\nimport {AllImages} from \"./components/all_images/AllImages\";\nimport {Footer} from \"./components/footer/Footer\";\n\nfunction App() {\n    const [isModalOpen, setIsModalOpen] = useState<boolean>(false)\n\n    const ImgModalHandler = () => {\n        setIsModalOpen(!isModalOpen)\n    }\n\n    return (\n        <div className={styles.app}>\n            <div className={styles.content}>\n                <Header/>\n                <AllImages\n                    isModalOpen={isModalOpen}\n                    setIsModalOpen={ImgModalHandler}/>\n            </div>\n            <Footer/>\n            {isModalOpen &&\n            <div className={styles.modal_block}>\n\n            </div>\n            }\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {allImgReducer} from \"./allImgReducer\";\r\nimport {imgModalWindowReducer} from \"./imgModalWindowReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    allImg: allImgReducer,\r\n    imgModalWindow: imgModalWindowReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app___EGI3\",\"content\":\"app_content__1SDmu\",\"modal_block\":\"app_modal_block__3oSkm\"};"],"sourceRoot":""}